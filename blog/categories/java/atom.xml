<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 19 drops]]></title>
  <link href="http://19drops.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://19drops.com/"/>
  <updated>2014-09-20T21:13:42+02:00</updated>
  <id>http://19drops.com/</id>
  <author>
    <name><![CDATA[Enrique Aguilar Esnaola]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[No Nulls]]></title>
    <link href="http://19drops.com/blog/2014/09/20/no-nulls/"/>
    <updated>2014-09-20T15:46:38+02:00</updated>
    <id>http://19drops.com/blog/2014/09/20/no-nulls</id>
    <content type="html"><![CDATA[<p>Una de las nuevas <em>features</em> incorporadas en Java 8 es <strong>Optional</strong>, que representa la
posibilidad de que un concepto pueda no tener valor, y su aplicación más clara está
al aplicarlo al valor retornado por un método/función.</p>

<pre><code class="java">public class SubscribersRepo{
  ...
  public String findAddressByPhone(final String theNumber) {
    ... some access to a data repository
  }
  ...
}

...
    String address =
        SubscribersRepo.findAddressByPhone("+930700555555");

    if(address != null) {
       sendSomeGift(address);
    }
...
</code></pre>

<p>Aquí son dos las cuestiones a tener en cuenta:</p>

<ol>
<li> No queda modelizado que es posible que la información que se solicita no exista</li>
<li> Si la información no existe, o se retorna un null, o se lanza una excepción</li>
</ol>


<p>Realmente el problema es el punto 1, ya que si algo no está modelizado, lógicamente es un caso excepcional.</p>

<p><strong>Optional</strong> permite modelizar la posible ausencia de información y evita la &ldquo;excepcionalidad&rdquo; de la situación.
&#8220;` java
public class SubscribersRepo{
  &hellip;
  public Optional<String> findAddressByPhone(final String theNumber){
    &hellip; some access to a data repository
  }
  &hellip;
}</p>

<p>&hellip;
  SubscribersRepo.findAddressByPhone(&ldquo;+930700555555&rdquo;)
                 .ifPresent(address -> sendSomeGift(address));
&hellip;
&#8220;`
Ahora queda claro que la información puede no existir, y en cualquier caso (exista o no), el flujo del
programa es el mismo, no hay tratamientos especiales.</p>

<!-- more -->


<p>Este es el uso <em>canónico</em> de Optional en Java (valor de retorno en una función), que se espera que vaya siendo aplicado
según se vayan migrando librerías, pero llevará tiempo y mientras continuará habiendo nulls.</p>

<p>El uso de Optional es simple:</p>

<h1>Creación de un Optional</h1>

<pre><code class="java">Optional&lt;String&gt; stringOptional =
                 Optional.of("this string");

Optional&lt;String&gt; stringOrEmptyOptional =
                 Optional.ofNullable(theUnknownString);
</code></pre>

<p>Una feature que ayuda con el tratamiento de nulls es que un Optional de null es un Optional.empty(),
aunque debe ser creado con <code>ofNullable</code>.</p>

<p><strong>Tip 1</strong>: si no se está seguro del origen de la variable <code>ofNullable</code> es más seguro.</p>

<h1>Extracción del valor</h1>

<pre><code class="java">  public void doSomething(final Optional&lt;Long&gt; optionalLong){

    Long longOptional =
                    optionalLong.get();

    Long longOrElseOptional =
                    optionalLong.orElse(0L);

    Long longOrElseCalculatedOptional =
                    optionalLong
                    .orElseGet(() -&gt; calculateFibonnacci(12L));

  }
</code></pre>

<p><code>get</code> y <code>orElse</code> extraen valores del Optional, y <code>orElse</code> proporciona un valor por defecto para
el caso que el Optional almacene un null.</p>

<p><strong>Tip 2</strong> : la llamada a <code>get</code> dará un NPE si el valor almacenado en el Optional es null. Extraer el
valor a través de <code>orElse</code> es más seguro.</p>

<h1>Transformación del valor</h1>

<pre><code class="java">
  ...
  Optional&lt;Tax&gt; stateTax = findStateTax("mo");

  Integer taxToApply =  
                stateTax
                    .map(tax -&gt; sum(tax + federalTax))
                    .orElseGet(()-&gt; calculateHistoricalTax());


  Optional&lt;Discount&gt; dBase =
                          findDiscount("wonderfulPhone");
  Optional&lt;Discount&gt; dState =
                          findDiscount("wonderfulPhone", "mo");

  Optional&lt;Discount&gt; fullDiscount =
                  dBase
                  .flatMap(d -&gt; Optional.of(d + dState.get());
</code></pre>

<p><strong>Tip 3</strong> : si se necesita un valor por defecto y generarlo es costoso, entonces es mejor
<code>orElseGet</code>, que se evaluará sólo si es necesario.</p>

<h1>Ejecución condicional</h1>

<pre><code class="java">
  Optional&lt;Integer&gt; price = findPrice("wonderfulPhone");

  if(!price.isPresent()){
    System.out.println("Sorry, still cannot sell it");
  }

  price.ifPresent(p -&gt; notifyPriceToAllReservations());

  price
      .filter(p -&gt; p &gt; 9_000_000)
      .ifPresent(p -&gt; rememberItIsVeryWonderful());
</code></pre>

<p><strong>Tip 4</strong>: el menos <em>funcional</em> de todos estos métodos es <em>isPresent</em>, si se puede es mejor favorecer los otros</p>

<p>Una última cosa sobre Optimal: Java 8 es la primera aproximación de Java a la programación funcional,
y se ha centrado sobre todo en la incorporación de las lambdas al lenguaje, pero en el caso de
Optiomal, además es un <a href="https://gist.github.com/ms-tg/7420496">Monad</a>.</p>
]]></content>
  </entry>
  
</feed>
