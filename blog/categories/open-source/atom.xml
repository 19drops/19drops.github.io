<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open Source | 19 drops]]></title>
  <link href="http://19drops.com/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://19drops.com/"/>
  <updated>2014-10-09T20:23:21+02:00</updated>
  <id>http://19drops.com/</id>
  <author>
    <name><![CDATA[Enrique Aguilar Esnaola]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Akismet Y Groovy]]></title>
    <link href="http://19drops.com/blog/2010/02/03/akismet-y-groovy/"/>
    <updated>2010-02-03T19:22:37+01:00</updated>
    <id>http://19drops.com/blog/2010/02/03/akismet-y-groovy</id>
    <content type="html"><![CDATA[<p><a href="http://akismet.com/">Akismet</a> es el servicio de detección de spam que utiliza WordPress, pero no solamente es utilizable desde WordPress, sino que cualquier aplicación puede utilizarlo a través del <a href="http://akismet.com/development/api/">API REST</a> que ofrece. Akismet no es un servicio gratuito, pero las modalidades de uso que ofrece son bastante asequibles, teniendo en cuenta los ahorros que puede suponer el no tener que tratar con el spam en tu sistema (o al menos, no tanto como sin él).
El API es muy simple, son únicamente cuatro operaciones:</p>

<ul>
<li>Verificar la clave de uso (verifiy-key)</li>
<li>Comprobar un comentario (comment-check)</li>
<li>Notificar un falso negativo (submit-spam)</li>
<li>Notificar un falso positico (submit-ham)</li>
</ul>


<p>Bueno, esto está bien, pero lo que realmente quería, era aprovechar este sencillo API y un wrapper sobre él en Groovy (<a href="https://github.com/enqae/akismet-client">AkismetDrops</a>), para ver por encima alguna de las características que, desde mi punto de vista, hacen de Groovy algo interesante:</p>

<!--more-->


<h4>Integración con Java</h4>

<p>Groovy se compila a bytecode y su sintaxis es muy similar a la de Java, ello hace que la utilización de cualquier librería Java existente sea trivial:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import org.apache.commons.logging.Log
</span><span class='line'>import org.apache.commons.logging.LogFactory
</span><span class='line'>&hellip;
</span><span class='line'>Log logger = LogFactory.getLog(this.class.name)
</span><span class='line'>&hellip;</span></code></pre></td></tr></table></div></figure></p>

<h4> Sintaxis cómoda para el manejo de listas y mapas</h4>

<p>Las listas y mapas probablemente sean uno de los elementos más utilizados en los programas, por lo que una sintaxis que simplifique su uso, sería muy apreciada:</p>

<p>Declarar una List</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def validMethods = [&lsquo;isThisCommentSpam&rsquo;: &ldquo;comment-check&rdquo;,
</span><span class='line'>                      &lsquo;thisCommentShouldBeSpam&rsquo;: &ldquo;submit-spam&rdquo;,
</span><span class='line'>                      &lsquo;thisCommentIsFalsePositive&rsquo;: &ldquo;submit-ham&rdquo;]</span></code></pre></td></tr></table></div></figure></p>

<p>Declarar e iterar por los valores de un Map</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def dataToPost = [:] // Map
</span><span class='line'>  &hellip;
</span><span class='line'>  def queryString = [] // List&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  parameters.each {k, v ->
</span><span class='line'>     queryString &lt;&lt; &ldquo;${k}=${URLEncoder.encode(v)}&rdquo;
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure></p>

<h4>Sentencias de control de flujo potenciadas</h4>

<p>Las sentencias <strong>if</strong> y <strong>switch</strong> están muy potenciadas, especialmente la sentencia switch, que contrariamente a lo que ocurre en Java, que solamente admite enteros, en Groovy admite casi cualquier cosa (cadenas, mapas, rangos…):</p>

<ul>
<li>power switch</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def requiredParameters = [AkismetComment.BLOG,
</span><span class='line'>                            AkismetComment.USER_IP, AkismetComment.USER_AGENT,
</span><span class='line'>                            AkismetComment.COMMENT_CONTENT]
</span><span class='line'>  &hellip;
</span><span class='line'>  &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  switch (property.key) {
</span><span class='line'>      case &ldquo;class&rdquo;:
</span><span class='line'>      case &ldquo;metaClass&rdquo;:
</span><span class='line'>        break
</span><span class='line'>      case &ldquo;otherData&rdquo;:
</span><span class='line'>        property.value?.each {k, v ->
</span><span class='line'>          if (v)
</span><span class='line'>            dataToPost.put(k, v?.toString())
</span><span class='line'>         }
</span><span class='line'>        break
</span><span class='line'>      case requiredParameters:
</span><span class='line'>        if (property.value?.trim()) {
</span><span class='line'>          dataToPost.&ldquo;${property.key}&rdquo; = property.value.toString()
</span><span class='line'>        } else {
</span><span class='line'>          if (property.key == &lsquo;blog&rsquo;) {
</span><span class='line'>            dataToPost.blog = blog
</span><span class='line'>          } else {
</span><span class='line'>            throw new IllegalArgumentException(&ldquo;Required parameter: ${property.key}&rdquo;)
</span><span class='line'>          }
</span><span class='line'>        }
</span><span class='line'>        break
</span><span class='line'>      case nonRequiredParameters:
</span><span class='line'>        if (property.value?.trim()) {
</span><span class='line'>          dataToPost.&ldquo;${property.key}&rdquo; = property.value
</span><span class='line'>        }
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure></p>

<h4>Identity/with</h4>

<p>Esto en realidad es casi una curiosidad, pero si vas a realizar múltiples operaciones sobre un objeto, el tener que escribir el nombre del objeto para cada operación puede ser un poco tedioso, y aquí la identity nos ahorra unas pulsaciones:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Writer writer = new OutputStreamWriter(connection.outputStream)
</span><span class='line'>      writer.with {
</span><span class='line'>        &hellip;
</span><span class='line'>        write queryString.join(&lsquo;&amp;&rsquo;) // writer.wrie
</span><span class='line'>        flush() //writer.flush
</span><span class='line'>        close() //writer.close
</span><span class='line'>      }</span></code></pre></td></tr></table></div></figure></p>

<h4>Closures</h4>

<p>Esta es una de las características más importantes de Groovy, que le proporcionan las capacidades de los lenguajes funcionales. Si trabajas con Groovy, tienes que manejarte con las closures porque están en la base del lenguaje. Es cierto, que requieren un cierto tiempo para acostumbrarse, pero luego se hacen imprescindibles.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Closure response200 = {text ->
</span><span class='line'>                            Boolean result = (text == &lsquo;true&rsquo;) ;
</span><span class='line'>                            if (logger.isDebugEnabled()) {
</span><span class='line'>                              if (!result) {
</span><span class='line'>                                if (text != &lsquo;false&rsquo;) {
</span><span class='line'>                                  logger.debug(&ldquo;Message from Akismet: ${text}&rdquo;)
</span><span class='line'>                                }
</span><span class='line'>                              }
</span><span class='line'>                            }
</span><span class='line'>                            return result
</span><span class='line'>                        }
</span><span class='line'>&hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p> def validMethodsActions = [&lsquo;isThisCommentSpam&rsquo;: response200,
</span><span class='line'>                             &lsquo;thisCommentShouldBeSpam&rsquo;: response200Log,
</span><span class='line'>                             &lsquo;thisCommentIsFalsePositive&rsquo;: response200Log]
</span><span class='line'>&hellip;</span></code></pre></td></tr></table></div></figure></p>

<h4>Comportamiento dinámico</h4>

<p>Groovy es un lenguaje dinámico, es decir, es posible modificar su comportamiento durante la propia ejecución, y esto va desde modificar ligeramente el comportamiento de determinados métodos de un objeto, hasta generar nuevos métodos para un objeto en tiempo de ejecución, existe incluso una forma de atender a métodos que no existen. Y esto para qué sirve, bueno al principio puede ser un poco complicado de ver pero esta característica es la que da soporte entre otras cosas a un framework como Grails (que es una de las cosas que hacen especialmente intersante a Groovy).</p>

<ul>
<li>AOP fácil:</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Declara la clase como interceptable
</span><span class='line'>class Akismet implements GroovyInterceptable {
</span><span class='line'>  &hellip;
</span><span class='line'>  // Declara los métodos del API vacíos
</span><span class='line'>  Boolean isApiKeyValid() {}
</span><span class='line'>  Boolean isThisCommentSpam(AkismetComment comment) {}
</span><span class='line'>  Boolean thisCommentShouldBeSpam(AkismetComment comment) {}
</span><span class='line'>  def thisCommentIsFalsePositive(AkismetComment comment) {}
</span><span class='line'>  &hellip;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  def validMethods = [&lsquo;isThisCommentSpam&rsquo;: &ldquo;comment-check&rdquo;,
</span><span class='line'>                      &lsquo;thisCommentShouldBeSpam&rsquo;: &ldquo;submit-spam&rdquo;,
</span><span class='line'>                      &lsquo;thisCommentIsFalsePositive&rsquo;: &ldquo;submit-ham&rdquo;]
</span><span class='line'>  &hellip;
</span><span class='line'>  // Declara el interceptor - Todas las llamadas vendrán por aquí
</span><span class='line'>  def invokeMethod(String name, args) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if (validMethods[name]) {
</span><span class='line'>  // Si es uno de los métodos del API se tratarán aquí enviándolos a Akismet
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'>} else {
</span><span class='line'>  // Si no es uno de los métodos del API, miramos si es un método que existe o no
</span><span class='line'>
</span><span class='line'>  def otherMethod = Akismet.metaClass.getMetaMethod(name, args)
</span><span class='line'>  if (otherMethod) {
</span><span class='line'>
</span><span class='line'>    // El método existe y cedemos el control a su implementación ...
</span><span class='line'>    return otherMethod.invoke(this, args)
</span><span class='line'>  } else {
</span><span class='line'>
</span><span class='line'>    // Se solicita un método que no existe, y cedemos el control al gestor por defecto, aunque
</span><span class='line'>    // podríamos haber hecho cualquier otra cosa...
</span><span class='line'>    Akismet.metaClass.invokeMissingMethod(this, name, args)
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  &hellip;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>Esto es solamente rascar un poco la superficie, quedan fuera muchas cosas (rangos, bucles simplificados, categories, builders…). Un par de libros que tratan el tema con muchísima más amplitud son <a href="http://www.manning.com/koenig/">Groovy in Action</a> y <a href="http://pragprog.com/titles/vslg/programming-groovy">Programming Groovy</a>.</p>

<p>Pero&hellip; para poder hacer todo esto desde Java, qué hay que hacer? &hellip; pues aunque parezca mentira, solamente hay que incluir un JAR&hellip; y, bueno, no se me han olvidado los ;  &hellip; se pueden poner, pero no son obligatorios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Groovy]]></title>
    <link href="http://19drops.com/blog/2010/01/20/groovy/"/>
    <updated>2010-01-20T20:33:33+01:00</updated>
    <id>http://19drops.com/blog/2010/01/20/groovy</id>
    <content type="html"><![CDATA[<p>En los últimos dos años se ha producido la consolidación de un proceso, que venía fraguándose de un tiempo antes, en el que la JVM ha pasado de ser la máquina virtual en la que se ejecutaba Java a transformarse en una plataforma sobre la que corren un conjunto muy amplio de lenguajes. Esto es interesante fundamentalmente por tres cosas:</p>

<ul>
<li>es posible elegir, de entre todos estos lenguajes, el que mejor se ajuste a las necesidades de cada proyecto en particular</li>
<li>ofrecen una gran integración e interoperabilidad con Java, de modo que su combinación es sencilla pudiendo incluso utilizarlos simultáneamente</li>
<li>aprovechan la infraestructura de JVMs ya existentes en multitud de instalaciones</li>
</ul>


<p>Algunos de los más populares son: <a href="http://www.scala-lang.org/">Scala</a>, considerado uno de los lenguajes del futuro, <a href="http://clojure.org/">Clojure</a>, con un foco especial en la programación concurrente, <a href="http://groovy.codehaus.org/">Groovy</a>, como un superconjunto de Java, Ruby (a través de <a href="http://jruby.org/">JRuby</a>), capaz de ejecutar Rails, PHP (a través de <a href="http://www.caucho.com/resin-3.0/quercus/">Quercus</a>), Javascript (<a href="http://www.mozilla.org/rhino/">Rhino</a>)…</p>

<p>Entre todos ellos, Groovy es uno de los más interesantes para los desarrolladores Java, porque:</p>

<ul>
<li>su sintaxis es muy similar a la de Java, la curva de aprendizaje es baja, no es un lenguaje diferente</li>
<li>ofrece las ventajas de un lenguaje dinámico</li>
<li>extiende el JDK, complementa a Java, simplifica el tratamiento de listas, maps, XML…</li>
<li>proporciona soporte para DSLs</li>
<li>  incorpora flavors de programación funcional (closures)…</li>
</ul>


<p>Pero lo que, desde mi punto de vista, hace a Groovy especialmente relevante para los desarrolladores Java es que dispone de un framework para desarrollo de aplicaciones web, Grails, que podemos decir equivalente en cuanto a funcionalidad, posibilidades y velocidad de desarrollo a Ruby On Rails, con todo lo que ello significa.
Actualmente SpringSource (creadores de Spring) se encarga del desarrollo de <a href="http://www.grails.org/">Grails</a>, y si lo combinamos con su <a href="http://www.cloudfoundry.com/">CloudFoundry</a>, podemos ir haciéndonos una idea de las posibilidades que esto ofrece…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TRAC]]></title>
    <link href="http://19drops.com/blog/2009/11/09/trac/"/>
    <updated>2009-11-09T14:28:44+01:00</updated>
    <id>http://19drops.com/blog/2009/11/09/trac</id>
    <content type="html"><![CDATA[<p>Dentro de las herramientas de seguimiento de errores existe un amplio abanico que va desde las más simples, o más centradas en su funcionalidad original, como <a href="http://www.bugzilla.org/">Bugzilla</a> o <a href="http://www.mantisbt.org/">Mantis</a> (ambos OpenSource), hasta las más evolucionadas como <a href="http://www.redmine.org/">Redmine</a> (OpenSource), <a href="http://www.atlassian.com/software/jira/">JIRA</a> o <a href="http://www.fogcreek.com/FogBUGZ/">FogBugz</a> (ambos comerciales), que complementan su funcionalidad original de seguimiento de errores con un conjunto de funcionalidades adicionales, que les permiten saltar un nivel y convertirse en herramientas con las que poder efectuar el control y la gestión de un proyecto.</p>

<p><a href="http://trac.edgewall.org/">TRAC</a> (OpenSource) es originalmente un sistema de seguimiento de issues, esto es importante porque se posiciona no como un sistema orientado principalmente a la gestión de bugs, como Bugzilla o Mantis (aunque luego hagan más cosas), sino que busca ofrecer los mecanismos básicos para poder efectuar la gestión de un proyecto, y en este sentido se aproxima a lo ofrecido por JIRA o FogBugz.</p>

<p>TRAC es flexible, no impone ninguna metodología, simplemente ofrece un conjunto de herramientas para que se puedan hacer las cosas, algunas de estas herramientas son:</p>

<ul>
<li>Sistema completo de gestión de Tickets, que permiten establecer y asignar las funcionalidades que se desarrollarán en el proceso (nuevas características, errores, tareas…)</li>
<li>Wiki, como repositorio común de información/documentación para el proyecto (estructura del proyecto, dónde están los servidores, cómo configurar los entornos, guías de estilo y codificación…tooodooo)</li>
<li>Integración con el sistema de control de versiones (Subversion y Git…entre otros)</li>
<li>Roadmap, o calendario de versiones, que permite ver el grado de avance y cuándo se preve que sean liberadas las nuevas funcionalidades</li>
<li>TimelIne, o lugar en el que se registran y se pueden revisar todas las operaciones realizadas en el proyecto desde el cambio en una página del wiki hasta el último commit en el repositorio de código.</li>
<li>RSS como mecanismo de seguimiento en casi todos los módulos de TRAC</li>
<li>&hellip;otras muchas&hellip;</li>
</ul>


<!--more-->


<p>Solamente con estas características sería una herramienta interesante ya que ofrece varias cosas importantes en un proyecto:</p>

<ul>
<li>Medio de comunicación con el cliente, en todo momento puede ver la marcha del proyecto.</li>
<li>Punto común de recogida del conocimiento asociado al proyecto.</li>
<li>Información al momento de la situación del proyecto en cada momento.</li>
</ul>


<p>Pero lo que caracteriza y diferencia fundamentalmente a TRAC del resto es su sistema de plugins, o mecanismo que permite extender TRAC todo lo que permita la imaginación y lo convierte casi-casi en una plataforma, y el soporte de la comunidad al mismo. Una lista completa de los pulgins disponibles para TRAC puede encontrarse en <a href="http://trac-hacks.org/">Trac Hacks</a>, y una lista un poco más corta:</p>

<h4> Gestión de usuarios</h4>

<ul>
<li>Administración de cuentas (AccountManagerPlugin)</li>
<li>Autenticación HTTP (HttpAuthPlugin)</li>
<li>Integración con Active Directory (ActiveDirectoryAuthPlugin)</li>
<li>Integración con CAS (TracCasPlugin)</li>
</ul>


<h4> Integración de la administración con Subversion</h4>

<ul>
<li>Integración de administración con SVN (<a href="http://trac-hacks.org/wiki/SvnAuthzAdminPlugin">SvnAuthzAdminPlugin</a> y <a href="http://trac-hacks.org/intertrac/TracSvnAuthzPlugin">TracSvnAuthzPlugin</a>)</li>
</ul>


<h4>Extensión del sistema de Tickets</h4>

<ul>
<li>Gestión de campos personalizados (<a href="http://trac-hacks.org/wiki/CustomFieldAdminPlugin">TracCustomFieldAdminPlugin</a>)</li>
<li>Gestión de workflows para tickets (<a href="http://trac-hacks.org/wiki/WorkflowEditorPlugin">WorkflowEditorPlugin</a> y <a href="http://trac-hacks.org/wiki/workflow">Workflows personalizados</a>)</li>
<li>Dependencias entre tickets (<a href="http://trac-hacks.org/wiki/MasterTicketsPlugin">MasterTicketsPlugin</a>)</li>
<li>Soporte para la estimación de horas en tickets (<a href="http://trac-hacks.org/wiki/TracHoursPlugin">TracHoursPlugin</a>, <a href="http://trac-hacks.org/wiki/TimingAndEstimationPlugin">TimingAndEstimationPlugin</a>, <a href="http://trac-hacks.org/wiki/EstimationToolsPlugin">EstimationToolsPlugin</a> y <a href="http://trac-hacks.org/wiki/SchedulingToolsPlugin">SchedulingToolsPlugin</a>)</li>
</ul>


<h4> Integración con otros sistemas y extensiones</h4>

<ul>
<li>Integración con Hudson (<a href="http://trac-hacks.org/wiki/HudsonTracPlugin">HudsonTracIntegrationPlugin</a>)</li>
<li>Integración con Git (<a href="http://trac-hacks.org/wiki/GitPlugin">GitPluginForTrac</a>)</li>
<li>Integración con Agilo-SCRUM (<a href="http://trac-hacks.org/wiki/AgiloForScrumPlugin">AgiloForScrumPlugin</a>)</li>
</ul>


<h5> Otros</h5>

<ul>
<li>Gestión de parámetros de inicialización de TRAC (<a href="http://trac-hacks.org/wiki/IniAdminPlugin">IniAdminPlugin</a>)</li>
<li>Personalización del Timeline (<a href="http://trac-hacks.org/wiki/TimelineCheckinFilterPlugin">TimelineCheckinFilterPlugin</a> y <a href="http://trac-hacks.org/wiki/TimelineUserFilterPlugin">TimelineUserFilterPlugin</a>)</li>
<li>Sistema de Tags (<a href="http://trac-hacks.org/wiki/TagsPlugin">TagsPlugin</a>)</li>
</ul>


<h5>Interoperabilidad</h5>

<p>De todos los plugins existentes para TRAC el más interesante de todos es el <a href="http://trac-hacks.org/intertrac/XmlRpcPlugin">XML-RPC Plugin</a> porque expone al exterior toda la funcionalidad de un servidor TRAC para que pueda integrarse con cualquier lenguaje y para cualquier cosa. Por ejemplo se podría:</p>

<ul>
<li>Construir un sistema simplificado para la entrada de tickets-bugs solamente con los datos estrictamente necesarios.</li>
<li>Realizar la alimentación inicial de issues en un proyecto a partir de un MS Project</li>
<li>Generar la descripción inicial de tareas a partir de una definición funcional decente</li>
<li>&hellip;</li>
</ul>


<p>y todo ello en el lenguaje y la forma (desktop, web…) que mejor nos venga. Espero poder terminar en breve <a href="https://github.com/enqae/trac-api">TRACdrops</a>, y poder disponer de TRAC desde Java con toda su potencia de una forma simple&hellip;</p>
]]></content>
  </entry>
  
</feed>
